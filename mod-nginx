#!/usr/bin/perl -w
# NGINX Module for VHCS kernel allows you to inslall nginx backend for VHCS-based systems
#
# @category		Nginx
# @verison		0.8
# @copyright	2009 - 2013 by koffu
# @author		Nikolay Yatsyshyn <koffua@gmail.com>
# @author		Vitaliy Zhukov <dragonzx@soclan.ru>
# @author		http://testino.ru
# @link			http://i-mscp.ru i-MSCP Russian Community
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2
###################################################################
#Please change settings below
use warnings;
use strict;
use DBI;

my $intconfig="mod-nginx.conf";
my %INTCFG;

open(INTCFG,"$intconfig") || die "Configuration file \"$intconfig\" does not found!!!\n";
while (<INTCFG>) {
    chomp;                  # no newline
    s/#.*//;                # no comments
    s/^\s+//;               # no leading white
    s/\s+$//;               # no trailing white
    next unless length;     # anything left?
    my ($var, $value) = split(/\s*=\s*/, $_, 2);
    $INTCFG{$var} = $value;
} 

close INTCFG;

my $now = localtime();
my %config;
my %domains;

# this sub will get main ispcp configuration parameters and fill hashes with it values
#Reading panel config
open (CFG,"/etc/imscp/imscp.conf") || die "Can't open ispcp configuration file /etc/imscp/imscp.conf!: $! ";
while (<CFG>) {
chomp;
s/#.*//; #removing comments, spaces
s/^\s+//;
s/\s+$//;
next unless length; # if something stay to parse
my ($var, $value) = split(/\s*=\s*/, $_, 2);
    $config{$var} = $value;
}
close CFG;


# Detecting OS and generating proper use method for linux/freebsd
my $nginxkuse;

# selecting valid threading module
if ($^O eq "linux") { $nginxkuse = "use epoll"; }
elsif ($^O eq "freebsd") { $nginxkuse = "use kqueue"; }
else { $nginxkuse = "#use [epoll | kqueue]"; }

# starting config content template
my $str = "# nginx config generation script.
# autogenerated as $INTCFG{NGINXCONF} file at $now\n
user  $INTCFG{NGINXUSER}; 
worker_processes  5;

error_log  $INTCFG{NGINXLOGLOCATION}/error.log info;
pid $INTCFG{NGINXPIDFILE};

worker_rlimit_nofile  8192;

events {
worker_connections  1024;
$nginxkuse;
}

http {
#Limits conn/rate
limit_conn_log_level warn;
limit_zone conn \$binary_remote_addr 10m;

limit_req_zone \$binary_remote_addr zone=mainpage:10m rate=5r/s;
limit_req_zone \$binary_remote_addr zone=2proxy:10m rate=10r/s;

#General
access_log $INTCFG{NGINXLOGLOCATION}/access.log;
server_names_hash_max_size 2048;
ignore_invalid_headers on;
recursive_error_pages on;
sendfile on;
server_tokens off;

#TCP
tcp_nodelay on;
tcp_nopush on;

#MIME
include    mime.types;
default_type  application/octet-stream;

#Timeouts
keepalive_timeout  5;
client_body_timeout 5;
client_header_timeout 5;
send_timeout 5;

#Compressing
gzip on;
gzip_comp_level 9;
gzip_http_version 1.0;
gzip_vary on;
gzip_min_length  0;
gzip_buffers  16 8k;
gzip_types    text/plain application/x-javascript text/xml text/css;

#Size limits
client_body_buffer_size 8k;
client_header_buffer_size 4k;
large_client_header_buffers 4 16k;
client_max_body_size 20m;

#Proxy
proxy_send_timeout   90;
proxy_read_timeout   90;
proxy_buffer_size    8k;
proxy_buffers     16 64k;
proxy_buffering on;
proxy_cache_valid 1m;
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k;
proxy_connect_timeout 120s;
proxy_redirect     off;

include \"$INTCFG{NGINXVCONF}\";

server {
listen       $INTCFG{NGINXPORT} ;
server_name  localhost;

location ~* ^/ngstub.* {
root /var/www/sharedip;
index on;
allow   127.0.0.1;
access_log /var/log/nginx/status_access.log;
deny all;
}}

}

";

# end config template

# writing nginx main config file
print "Writing global nginx configuration file...\n";
&writefile($INTCFG{NGINXCONF},$str);
print "done\n";



#printing header to file
$str = "# nginx virtual hosts configuration generation script.
# autogenerated as $INTCFG{NGINXVCONF} file at $now\n\n";

# writing section for each virtual host
my ($domref, $domphp_ref) = &mysqlget("domain");
my @domains = @$domref;
my @use_php = @$domphp_ref;

for (my $i=0;$i < scalar @domains;$i++) {
my $domain = $domains[$i];
my $use_php = $use_php[$i];

$str .= "# ---------- VirtualHost $domain ----------\n\n";

# finding override configuration file
if ( -s "conf.d/$domain") {
print "Using override configuration file for domain $domain\n";
open(DCONFIG,"conf.d/$domain") || die "Can\'t open file conf.d/$domain: $!";
while (<DCONFIG>) {
$str .= $_;
}
close(DCONFIG);
}

else {
$str .= "server \{
access_log $INTCFG{NGINXLOGLOCATION}/${domain}-access.log;
error_log  $INTCFG{NGINXLOGLOCATION}/vhosts-error.log warn;

listen    $INTCFG{NGINXPORT};
server_name  $domain www.$domain;\n\n";

# if php = yes handle static by nginx
if ( $INTCFG{STATIC} eq "all" ) { $use_php = "yes" }
elsif ( $INTCFG{STATIC} eq "none" ) { $use_php = "no" }

if ($use_php eq "yes" ) {
$str .= "# uncomment location below to make nginx serve static files instead of Apache
# !WARNING!
# it will make the bandwidth accounting incorrect as these files won’t be logged!
location ~* \\.\(gif|jpg|jpeg|png|wmv|avi|mpg|mpeg|mp4|js|css|bmp|csv|doc|epg|gif|ico|odj|mp3|pdf|swf|txt|xls|xcf|iso\)$ \{
root   $config{APACHE_WWW_DIR}/$domain/$INTCFG{PUBLICFOLDER}/;
\}\n
location ~* \\.php \{
limit_conn conn 5;
limit_req zone=2proxy burst=30;
proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};
proxy_set_header   Host   \$host;
proxy_set_header   X-Real-IP  \$remote_addr;
proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
\}\n"
}
else {
$str .= "# uncomment location below to make nginx serve static files instead of Apache
# !WARNING! 
# it will make the bandwidth accounting incorrect as these files won’t be logged!
#location ~* \\.\(gif|jpg|jpeg|png|wmv|avi|mpg|mpeg|mp4|js|css|bmp|csv|doc|epg|gif|ico|odj|mp3|pdf|swf|txt|xls|xcf|iso\)$ \{
#root   $config{APACHE_WWW_DIR}/$domain/$INTCFG{PUBLICFOLDER}/;
#\}\n
#location ~* \\.php \{
#limit_conn conn 5;
#limit_req zone=2proxy burst=30;
#proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};
#proxy_set_header   Host   \$host;
#proxy_set_header   X-Real-IP  \$remote_addr;
#proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
#\}\n"
}

$str .= "\nlocation / \{
proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};

proxy_set_header   Host   \$host;
proxy_set_header   X-Real-IP  \$remote_addr;
proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;

limit_conn conn 5;
limit_req zone=mainpage burst=30;
\}
\}\n\n";
}

my ($subdomref, $subdomnt_ref) = &mysqlget("subdomain",$domain);
my @subdomains = @$subdomref;
my @subdom_mount = @$subdomnt_ref;

for (my $i=0;$i < scalar @subdomains;$i++) {
my $subdomain = $subdomains[$i];
my $subdomain_mount = $subdom_mount[$i];

$str .= "# ---------- VirtualHost SubDomain $subdomain.$domain ----------\n\n";

# finding override configuration file
if ( -s "conf.d/$subdomain.$domain") {
print "Using override configuration file for subdomain $subdomain.$domain\n";
open(SUBDCONFIG,"conf.d/$subdomain.$domain") || die "Can\'t open file conf.d/$subdomain.$domain: $!";
while (<SUBDCONFIG>) {
$str .= $_;
}
close(SUBDCONFIG);
}
else {

$str .= "server \{
access_log $INTCFG{NGINXLOGLOCATION}/${subdomain}.${domain}-access.log;
error_log  $INTCFG{NGINXLOGLOCATION}/vhosts-error.log warn;

listen    $INTCFG{NGINXPORT};
server_name  $subdomain.$domain www.$subdomain.$domain;\n\n";

if ($use_php eq "yes" ) {
$str .= "# uncomment location below to make nginx serve static files instead of Apache
# !WARNING!
# it will make the bandwidth accounting incorrect as these files won’t be logged!
location ~* \\.\(gif|jpg|jpeg|png|wmv|avi|mpg|mpeg|mp4|js|css|bmp|csv|doc|epg|gif|ico|odj|mp3|pdf|swf|txt|xls|xcf|iso\)$ \{
root   $config{APACHE_WWW_DIR}/${domain}${subdomain_mount}/htdocs/;
\}\n
location ~* \\.php \{
limit_conn conn 5;
limit_req zone=2proxy burst=30;
proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};
proxy_set_header   Host   \$host;
proxy_set_header   X-Real-IP  \$remote_addr;
proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
\}\n"
}
else {
$str .= "# uncomment location below to make nginx serve static files instead of Apache
# !WARNING! 
# it will make the bandwidth accounting incorrect as these files won’t be logged!
#location ~* \\.\(gif|jpg|jpeg|png|wmv|avi|mpg|mpeg|mp4|js|css|bmp|csv|doc|epg|gif|ico|odj|mp3|pdf|swf|txt|xls|xcf|iso\)$ \{
#root   $config{APACHE_WWW_DIR}/${domain}${subdomain_mount}/htdocs/;
#\}\n
#location ~* \\.php \{
#limit_conn conn 5;
#limit_req zone=2proxy burst=30;
#proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};
#proxy_set_header   Host   \$host;
#proxy_set_header   X-Real-IP  \$remote_addr;
#proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
#\}\n"
}

$str .= "\nlocation / \{
proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};

proxy_set_header   Host   \$host;
proxy_set_header   X-Real-IP  \$remote_addr;
proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;

limit_conn conn 5;
limit_req zone=mainpage burst=30;
\}
\}\n";
print "Converted SUBDOMAIN\t$subdomain.$domain\n";
}
$str .= "\n# ---------- End VirtualHost SubDomain $subdomain.$domain ----------\n\n";
}

# FETCH subdomains
my ($domainaliasname_ref, $domainaliasmnt_ref, $urlforward_ref) = &mysqlget("domain_alias",$domain);
my @alias_name = @$domainaliasname_ref;
my @alias_mount = @$domainaliasmnt_ref;
my @url_forward = @$urlforward_ref;

for (my $i=0;$i < scalar @alias_name;$i++) {
	my $alias_name = $alias_name[$i];
	my $alias_mount = $alias_mount[$i];
	my $url_forward = $url_forward[$i];
#print "DEBUG: Domain alias: $alias_name, Domain mount $alias_mount, Domain fwd: $url_forward, Domain: $domain,\n";
$str .= "# ---------- VirtualHost DomainAlias $alias_name -> $domain ----------\n\n";

# finding override configuration file
if ( -s "conf.d/$alias_name") {
print "Using override configuration file for subdomain $alias_name\n";
open(SUBDALIASCONFIG,"conf.d/$alias_name") || die "Can\'t open file conf.d/$alias_name: $!";
while (<SUBDALIASCONFIG>) {
$str .= $_;
}
close(SUBDALIASCONFIG);
}
else {

$str .= "server \{
access_log $INTCFG{NGINXLOGLOCATION}/${alias_name}-access.log;
error_log  $INTCFG{NGINXLOGLOCATION}/vhosts-error.log warn;

listen    $INTCFG{NGINXPORT};
server_name  $alias_name www.$alias_name;\n\n";	

if ($url_forward eq 'no') {
if ($use_php eq "yes" ) {
$str .= "# uncomment location below to make nginx serve static files instead of Apache
# !WARNING!
# it will make the bandwidth accounting incorrect as these files won’t be logged!
location ~* \\.\(gif|jpg|jpeg|png|wmv|avi|mpg|mpeg|mp4|js|css|bmp|csv|doc|epg|gif|ico|odj|mp3|pdf|swf|txt|xls|xcf|iso\)$ \{
root   $config{APACHE_WWW_DIR}/${domain}${alias_mount}/htdocs/;
\}\n
location ~* \\.php \{
limit_conn conn 5;
limit_req zone=2proxy burst=30;
proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};
proxy_set_header   Host   \$host;
proxy_set_header   X-Real-IP  \$remote_addr;
proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
\}\n"
}
else {
$str .= "# uncomment location below to make nginx serve static files instead of Apache
# !WARNING! 
# it will make the bandwidth accounting incorrect as these files won’t be logged!
#location ~* \\.\(gif|jpg|jpeg|png|wmv|avi|mpg|mpeg|mp4|js|css|bmp|csv|doc|epg|gif|ico|odj|mp3|pdf|swf|txt|xls|xcf|iso\)$ \{
#root   $config{APACHE_WWW_DIR}/${domain}${alias_mount}/htdocs/;
#\}\n
#location ~* \\.php \{
#limit_conn conn 5;
#limit_req zone=2proxy burst=30;
#proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};
#proxy_set_header   Host   \$host;
#proxy_set_header   X-Real-IP  \$remote_addr;
#proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
#\}\n"
}

$str .= "\nlocation / \{
proxy_pass   http://$INTCFG{APACHEIP}:$INTCFG{APACHEPORT};

proxy_set_header   Host   \$host;
proxy_set_header   X-Real-IP  \$remote_addr;
proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;

limit_conn conn 5;
limit_req zone=mainpage burst=30;
\}\n}";
}
else {
$str .= "rewrite ^(.*) http://$domain\$1 permanent;
}\n";
}
}
$str .= "\n# ---------- End VirtualHost DomainAlias $alias_name -> $domain ----------\n\n";
	print "Converted DOMAIN_ALIAS\t$alias_name -> $domain\n";
}


$str .= "# ---------- End VirtualHost $domain ----------\n\n";

print "Converted DOMAIN\t$domain\n";
}

print "Writing nginx virtual hosts configuration file...\n";
&writefile($INTCFG{NGINXVCONF},$str);
print "done\n";


#--------------------------------------------------

sub mysqlget {

my $dbh = DBI->connect("DBI:mysql:$config{DATABASE_NAME};$config{DATABASE_HOST}","$INTCFG{DBUSER}","$INTCFG{DBPASS}") || die "Can't connect to MySQL: $!";

if ( $_[0] eq "domain") {
my @domain_name;
my @domain_php;
my $fdomains = $dbh->prepare("SELECT domain_name,domain_php FROM domain WHERE domain_status = \'ok\'");
$fdomains->execute();
	while ( my ($domain_name, $domain_php) = $fdomains->fetchrow_array()) {
		push @domain_name, $domain_name;
		push @domain_php, $domain_php;
	}
return (\@domain_name,\@domain_php);
$fdomains->finish();	
}
elsif ($_[0] eq "subdomain") {
my $domain = $_[1];
my @subdomain_name;
my @subdomain_mount;
my $fsubdomains = $dbh->prepare("SELECT subdomain.subdomain_name,subdomain.subdomain_mount FROM domain INNER JOIN subdomain WHERE domain.domain_id=subdomain.domain_id AND domain.domain_name = \'$domain\'");
$fsubdomains->execute();
	while ( my ($subdomain_name, $subdomain_mount) = $fsubdomains->fetchrow_array()) {
		push @subdomain_name, $subdomain_name;
		push @subdomain_mount, $subdomain_mount;
	}
return (\@subdomain_name, \@subdomain_mount);
	$fsubdomains->finish();
}

elsif ($_[0] eq "domain_alias") {
	# table domain_aliasses
# mysql> desc domain_aliasses;
#	+--------------+------------------+------+-----+---------+----------------+
#	| Field        | Type             | Null | Key | Default | Extra          |
#	+--------------+------------------+------+-----+---------+----------------+
#	| alias_id     | int(10) unsigned | NO   | PRI | NULL    | auto_increment | 
#	| domain_id    | int(10) unsigned | YES  |     | NULL    |                | 
#	| alias_name   | varchar(200)     | YES  |     | NULL    |                | 
#	| alias_status | varchar(255)     | YES  |     | NULL    |                | 
#	| alias_mount  | varchar(200)     | YES  |     | NULL    |                | 
#	| alias_ip_id  | int(10) unsigned | YES  |     | NULL    |                | 
#	| url_forward  | varchar(200)     | YES  |     | NULL    |                | 
#	+--------------+------------------+------+-----+---------+----------------+
#SELECT alias_name,alias_mount,domain.domain_name FROM domain_aliasses INNER JOIN domain WHERE domain_aliasses.domain_id=domain.domain_id AND domain_aliasses.alias_status='ok' AND domain_aliasses.url_forward='no';
#SELECT alias_name,alias_mount,domain.domain_name,domain_aliasses.url_forward FROM domain_aliasses INNER JOIN domain WHERE domain_aliasses.domain_id=domain.domain_id AND domain_aliasses.alias_status='ok' AND domain_aliasses.url_forward!='no';
#	SELECT alias_name,alias_mount,domain.domain_name,domain_aliasses.url_forward FROM domain_aliasses INNER JOIN domain WHERE domain_aliasses.domain_id=domain.domain_id AND domain_aliasses.alias_status='ok';
my $domain = $_[1];
my @alias_name;
my @alias_mount;
my @url_forward;
my $fdomain_alias = $dbh->prepare("SELECT alias_name,alias_mount,domain.domain_name,domain_aliasses.url_forward FROM domain_aliasses INNER JOIN domain WHERE domain_aliasses.domain_id=domain.domain_id AND domain_aliasses.alias_status=\'ok\' AND domain.domain_name=\'$domain\'");
$fdomain_alias->execute() || die "Failed to make SQL query";
	while ( my ($alias_name, $alias_mount, $domain_name, $url_forward) = $fdomain_alias->fetchrow_array()) {
		push @alias_name, $alias_name;
		push @alias_mount, $alias_mount;
		push @url_forward, $url_forward;
	}
return (\@alias_name, \@alias_mount, \@url_forward);
	$fdomain_alias->finish();
}

elsif ($_[0] eq "subdomain_alias") {
	# table subdomain_alias
# mysql> desc subdomain_alias;
#	+------------------------+------------------+------+-----+---------+----------------+
#	| Field                  | Type             | Null | Key | Default | Extra          |
#	+------------------------+------------------+------+-----+---------+----------------+
#	| subdomain_alias_id     | int(10) unsigned | NO   | PRI | NULL    | auto_increment | 
#	| alias_id               | int(10) unsigned | YES  |     | NULL    |                | 
#	| subdomain_alias_name   | varchar(200)     | YES  |     | NULL    |                | 
#	| subdomain_alias_mount  | varchar(200)     | YES  |     | NULL    |                | 
#	| subdomain_alias_status | varchar(255)     | YES  |     | NULL    |                | 
#	+------------------------+------------------+------+-----+---------+----------------+

}

$dbh->disconnect();
}


sub writefile {
my ($filename, $content) = @_;
unlink($filename);
print "Writing $filename...";
open(FILE, ">>$filename") || die "Failed to write $filename file: $!";
print FILE $content;
close FILE;
}
